// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: KlineData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TigerOpenAPI.Quote.Pb {

  /// <summary>Holder for reflection information generated from KlineData.proto</summary>
  public static partial class KlineDataReflection {

    #region Descriptor
    /// <summary>File descriptor for KlineData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KlineDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9LbGluZURhdGEucHJvdG8SNGNvbS50aWdlcmJyb2tlcnMuc3RvY2sub3Bl",
            "bmFwaS5jbGllbnQuc29ja2V0LmRhdGEucGIizwEKCUtsaW5lRGF0YRIMCgR0",
            "aW1lGAEgASgDEgwKBG9wZW4YAiABKAISDAoEaGlnaBgDIAEoAhILCgNsb3cY",
            "BCABKAISDQoFY2xvc2UYBSABKAISCwoDYXZnGAYgASgCEg4KBnZvbHVtZRgH",
            "IAEoAxINCgVjb3VudBgIIAEoBRIOCgZzeW1ib2wYCSABKAkSDgoGYW1vdW50",
            "GAogASgBEhwKD3NlcnZlclRpbWVzdGFtcBgLIAEoBEgAiAEBQhIKEF9zZXJ2",
            "ZXJUaW1lc3RhbXBCGKoCFVRpZ2VyT3BlbkFQSS5RdW90ZS5QYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TigerOpenAPI.Quote.Pb.KlineData), global::TigerOpenAPI.Quote.Pb.KlineData.Parser, new[]{ "Time", "Open", "High", "Low", "Close", "Avg", "Volume", "Count", "Symbol", "Amount", "ServerTimestamp" }, new[]{ "ServerTimestamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class KlineData : pb::IMessage<KlineData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KlineData> _parser = new pb::MessageParser<KlineData>(() => new KlineData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<KlineData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TigerOpenAPI.Quote.Pb.KlineDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public KlineData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public KlineData(KlineData other) : this() {
      _hasBits0 = other._hasBits0;
      time_ = other.time_;
      open_ = other.open_;
      high_ = other.high_;
      low_ = other.low_;
      close_ = other.close_;
      avg_ = other.avg_;
      volume_ = other.volume_;
      count_ = other.count_;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      serverTimestamp_ = other.serverTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public KlineData Clone() {
      return new KlineData(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    /// bar timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 2;
    private float open_;
    /// <summary>
    /// The first transaction price of current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 3;
    private float high_;
    /// <summary>
    /// The highest price of current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 4;
    private float low_;
    /// <summary>
    /// The lowest price of current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 5;
    private float close_;
    /// <summary>
    /// The last transaction price in the current minute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Close {
      get { return close_; }
      set {
        close_ = value;
      }
    }

    /// <summary>Field number for the "avg" field.</summary>
    public const int AvgFieldNumber = 6;
    private float avg_;
    /// <summary>
    /// The average price of current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Avg {
      get { return avg_; }
      set {
        avg_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 7;
    private long volume_;
    /// <summary>
    /// Cumulative trading volume in current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 8;
    private int count_;
    /// <summary>
    /// The number of transaction in current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 9;
    private string symbol_ = "";
    /// <summary>
    /// symbol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 10;
    private double amount_;
    /// <summary>
    /// Cumulative turnover in current minute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "serverTimestamp" field.</summary>
    public const int ServerTimestampFieldNumber = 11;
    private ulong serverTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ServerTimestamp {
      get { if ((_hasBits0 & 1) != 0) { return serverTimestamp_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        serverTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "serverTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasServerTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "serverTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearServerTimestamp() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as KlineData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(KlineData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Open, other.Open)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(High, other.High)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Low, other.Low)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Close, other.Close)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Avg, other.Avg)) return false;
      if (Volume != other.Volume) return false;
      if (Count != other.Count) return false;
      if (Symbol != other.Symbol) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Amount, other.Amount)) return false;
      if (ServerTimestamp != other.ServerTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Open != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Open);
      if (High != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(High);
      if (Low != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Low);
      if (Close != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Close);
      if (Avg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Avg);
      if (Volume != 0L) hash ^= Volume.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Amount);
      if (HasServerTimestamp) hash ^= ServerTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (Open != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Open);
      }
      if (High != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(High);
      }
      if (Low != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Low);
      }
      if (Close != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Close);
      }
      if (Avg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Avg);
      }
      if (Volume != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Volume);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Count);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Symbol);
      }
      if (Amount != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Amount);
      }
      if (HasServerTimestamp) {
        output.WriteRawTag(88);
        output.WriteUInt64(ServerTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (Open != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Open);
      }
      if (High != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(High);
      }
      if (Low != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Low);
      }
      if (Close != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Close);
      }
      if (Avg != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Avg);
      }
      if (Volume != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Volume);
      }
      if (Count != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Count);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Symbol);
      }
      if (Amount != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Amount);
      }
      if (HasServerTimestamp) {
        output.WriteRawTag(88);
        output.WriteUInt64(ServerTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Open != 0F) {
        size += 1 + 4;
      }
      if (High != 0F) {
        size += 1 + 4;
      }
      if (Low != 0F) {
        size += 1 + 4;
      }
      if (Close != 0F) {
        size += 1 + 4;
      }
      if (Avg != 0F) {
        size += 1 + 4;
      }
      if (Volume != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Volume);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0D) {
        size += 1 + 8;
      }
      if (HasServerTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(KlineData other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Open != 0F) {
        Open = other.Open;
      }
      if (other.High != 0F) {
        High = other.High;
      }
      if (other.Low != 0F) {
        Low = other.Low;
      }
      if (other.Close != 0F) {
        Close = other.Close;
      }
      if (other.Avg != 0F) {
        Avg = other.Avg;
      }
      if (other.Volume != 0L) {
        Volume = other.Volume;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0D) {
        Amount = other.Amount;
      }
      if (other.HasServerTimestamp) {
        ServerTimestamp = other.ServerTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 21: {
            Open = input.ReadFloat();
            break;
          }
          case 29: {
            High = input.ReadFloat();
            break;
          }
          case 37: {
            Low = input.ReadFloat();
            break;
          }
          case 45: {
            Close = input.ReadFloat();
            break;
          }
          case 53: {
            Avg = input.ReadFloat();
            break;
          }
          case 56: {
            Volume = input.ReadInt64();
            break;
          }
          case 64: {
            Count = input.ReadInt32();
            break;
          }
          case 74: {
            Symbol = input.ReadString();
            break;
          }
          case 81: {
            Amount = input.ReadDouble();
            break;
          }
          case 88: {
            ServerTimestamp = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 21: {
            Open = input.ReadFloat();
            break;
          }
          case 29: {
            High = input.ReadFloat();
            break;
          }
          case 37: {
            Low = input.ReadFloat();
            break;
          }
          case 45: {
            Close = input.ReadFloat();
            break;
          }
          case 53: {
            Avg = input.ReadFloat();
            break;
          }
          case 56: {
            Volume = input.ReadInt64();
            break;
          }
          case 64: {
            Count = input.ReadInt32();
            break;
          }
          case 74: {
            Symbol = input.ReadString();
            break;
          }
          case 81: {
            Amount = input.ReadDouble();
            break;
          }
          case 88: {
            ServerTimestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
