// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PositionData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TigerOpenAPI.Quote.Pb {

  /// <summary>Holder for reflection information generated from PositionData.proto</summary>
  public static partial class PositionDataReflection {

    #region Descriptor
    /// <summary>File descriptor for PositionData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PositionDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQb3NpdGlvbkRhdGEucHJvdG8SNGNvbS50aWdlcmJyb2tlcnMuc3RvY2su",
            "b3BlbmFwaS5jbGllbnQuc29ja2V0LmRhdGEucGIitwMKDFBvc2l0aW9uRGF0",
            "YRIPCgdhY2NvdW50GAEgASgJEg4KBnN5bWJvbBgCIAEoCRIOCgZleHBpcnkY",
            "AyABKAkSDgoGc3RyaWtlGAQgASgJEg0KBXJpZ2h0GAUgASgJEhIKCmlkZW50",
            "aWZpZXIYBiABKAkSEgoKbXVsdGlwbGllchgHIAEoDRIOCgZtYXJrZXQYCCAB",
            "KAkSEAoIY3VycmVuY3kYCSABKAkSDwoHc2VnVHlwZRgKIAEoCRIPCgdzZWNU",
            "eXBlGAsgASgJEhAKCHBvc2l0aW9uGAwgASgSEhUKDXBvc2l0aW9uU2NhbGUY",
            "DSABKBESEwoLYXZlcmFnZUNvc3QYDiABKAESEwoLbGF0ZXN0UHJpY2UYDyAB",
            "KAESEwoLbWFya2V0VmFsdWUYECABKAESFQoNdW5yZWFsaXplZFBubBgRIAEo",
            "ARIMCgRuYW1lGBIgASgJEhEKCXRpbWVzdGFtcBgTIAEoBBIVCghzYWxlYWJs",
            "ZRgUIAEoEkgAiAEBEhMKC3Bvc2l0aW9uUXR5GBUgASgBEhIKCnNhbGFibGVR",
            "dHkYFiABKAFCCwoJX3NhbGVhYmxlQhiqAhVUaWdlck9wZW5BUEkuUXVvdGUu",
            "UGJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TigerOpenAPI.Quote.Pb.PositionData), global::TigerOpenAPI.Quote.Pb.PositionData.Parser, new[]{ "Account", "Symbol", "Expiry", "Strike", "Right", "Identifier", "Multiplier", "Market", "Currency", "SegType", "SecType", "Position", "PositionScale", "AverageCost", "LatestPrice", "MarketValue", "UnrealizedPnl", "Name", "Timestamp", "Saleable", "PositionQty", "SalableQty" }, new[]{ "Saleable" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PositionData : pb::IMessage<PositionData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PositionData> _parser = new pb::MessageParser<PositionData>(() => new PositionData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PositionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TigerOpenAPI.Quote.Pb.PositionDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PositionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PositionData(PositionData other) : this() {
      _hasBits0 = other._hasBits0;
      account_ = other.account_;
      symbol_ = other.symbol_;
      expiry_ = other.expiry_;
      strike_ = other.strike_;
      right_ = other.right_;
      identifier_ = other.identifier_;
      multiplier_ = other.multiplier_;
      market_ = other.market_;
      currency_ = other.currency_;
      segType_ = other.segType_;
      secType_ = other.secType_;
      position_ = other.position_;
      positionScale_ = other.positionScale_;
      averageCost_ = other.averageCost_;
      latestPrice_ = other.latestPrice_;
      marketValue_ = other.marketValue_;
      unrealizedPnl_ = other.unrealizedPnl_;
      name_ = other.name_;
      timestamp_ = other.timestamp_;
      saleable_ = other.saleable_;
      positionQty_ = other.positionQty_;
      salableQty_ = other.salableQty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PositionData Clone() {
      return new PositionData(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    /// user account
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 3;
    private string expiry_ = "";
    /// <summary>
    /// for options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Expiry {
      get { return expiry_; }
      set {
        expiry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 4;
    private string strike_ = "";
    /// <summary>
    /// for options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Strike {
      get { return strike_; }
      set {
        strike_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 5;
    private string right_ = "";
    /// <summary>
    /// for options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Right {
      get { return right_; }
      set {
        right_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identifier" field.</summary>
    public const int IdentifierFieldNumber = 6;
    private string identifier_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Identifier {
      get { return identifier_; }
      set {
        identifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "multiplier" field.</summary>
    public const int MultiplierFieldNumber = 7;
    private uint multiplier_;
    /// <summary>
    /// multiplier for futures, options, warrants and CBBC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Multiplier {
      get { return multiplier_; }
      set {
        multiplier_ = value;
      }
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int MarketFieldNumber = 8;
    private string market_ = "";
    /// <summary>
    /// market. US, HK, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Market {
      get { return market_; }
      set {
        market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 9;
    private string currency_ = "";
    /// <summary>
    /// currency. USD, HKD, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "segType" field.</summary>
    public const int SegTypeFieldNumber = 10;
    private string segType_ = "";
    /// <summary>
    /// Securities Category C: (Commodities Futures), S: (Securities Stocks)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SegType {
      get { return segType_; }
      set {
        segType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secType" field.</summary>
    public const int SecTypeFieldNumber = 11;
    private string secType_ = "";
    /// <summary>
    /// STK Stocks, OPT Options, WAR Warrants, IOPT CBBC, CASH FOREX, FUT Futures, FOP Future Options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecType {
      get { return secType_; }
      set {
        secType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 12;
    private long position_;
    /// <summary>
    /// total position
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "positionScale" field.</summary>
    public const int PositionScaleFieldNumber = 13;
    private int positionScale_;
    /// <summary>
    /// total position scale
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PositionScale {
      get { return positionScale_; }
      set {
        positionScale_ = value;
      }
    }

    /// <summary>Field number for the "averageCost" field.</summary>
    public const int AverageCostFieldNumber = 14;
    private double averageCost_;
    /// <summary>
    /// average holding cost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AverageCost {
      get { return averageCost_; }
      set {
        averageCost_ = value;
      }
    }

    /// <summary>Field number for the "latestPrice" field.</summary>
    public const int LatestPriceFieldNumber = 15;
    private double latestPrice_;
    /// <summary>
    /// last price of the asset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LatestPrice {
      get { return latestPrice_; }
      set {
        latestPrice_ = value;
      }
    }

    /// <summary>Field number for the "marketValue" field.</summary>
    public const int MarketValueFieldNumber = 16;
    private double marketValue_;
    /// <summary>
    /// market value of the asset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MarketValue {
      get { return marketValue_; }
      set {
        marketValue_ = value;
      }
    }

    /// <summary>Field number for the "unrealizedPnl" field.</summary>
    public const int UnrealizedPnlFieldNumber = 17;
    private double unrealizedPnl_;
    /// <summary>
    /// unrealized profit and loss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UnrealizedPnl {
      get { return unrealizedPnl_; }
      set {
        unrealizedPnl_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 18;
    private string name_ = "";
    /// <summary>
    /// symbol name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 19;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "saleable" field.</summary>
    public const int SaleableFieldNumber = 20;
    private long saleable_;
    /// <summary>
    /// saleable quantity for Chinese A-share market stocks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Saleable {
      get { if ((_hasBits0 & 1) != 0) { return saleable_; } else { return 0L; } }
      set {
        _hasBits0 |= 1;
        saleable_ = value;
      }
    }
    /// <summary>Gets whether the "saleable" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSaleable {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "saleable" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSaleable() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "positionQty" field.</summary>
    public const int PositionQtyFieldNumber = 21;
    private double positionQty_;
    /// <summary>
    /// total position quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PositionQty {
      get { return positionQty_; }
      set {
        positionQty_ = value;
      }
    }

    /// <summary>Field number for the "salableQty" field.</summary>
    public const int SalableQtyFieldNumber = 22;
    private double salableQty_;
    /// <summary>
    /// saleable quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SalableQty {
      get { return salableQty_; }
      set {
        salableQty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PositionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PositionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Symbol != other.Symbol) return false;
      if (Expiry != other.Expiry) return false;
      if (Strike != other.Strike) return false;
      if (Right != other.Right) return false;
      if (Identifier != other.Identifier) return false;
      if (Multiplier != other.Multiplier) return false;
      if (Market != other.Market) return false;
      if (Currency != other.Currency) return false;
      if (SegType != other.SegType) return false;
      if (SecType != other.SecType) return false;
      if (Position != other.Position) return false;
      if (PositionScale != other.PositionScale) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageCost, other.AverageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LatestPrice, other.LatestPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MarketValue, other.MarketValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnrealizedPnl, other.UnrealizedPnl)) return false;
      if (Name != other.Name) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Saleable != other.Saleable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionQty, other.PositionQty)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SalableQty, other.SalableQty)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Expiry.Length != 0) hash ^= Expiry.GetHashCode();
      if (Strike.Length != 0) hash ^= Strike.GetHashCode();
      if (Right.Length != 0) hash ^= Right.GetHashCode();
      if (Identifier.Length != 0) hash ^= Identifier.GetHashCode();
      if (Multiplier != 0) hash ^= Multiplier.GetHashCode();
      if (Market.Length != 0) hash ^= Market.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (SegType.Length != 0) hash ^= SegType.GetHashCode();
      if (SecType.Length != 0) hash ^= SecType.GetHashCode();
      if (Position != 0L) hash ^= Position.GetHashCode();
      if (PositionScale != 0) hash ^= PositionScale.GetHashCode();
      if (AverageCost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageCost);
      if (LatestPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LatestPrice);
      if (MarketValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MarketValue);
      if (UnrealizedPnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnrealizedPnl);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (HasSaleable) hash ^= Saleable.GetHashCode();
      if (PositionQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionQty);
      if (SalableQty != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SalableQty);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Expiry.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Expiry);
      }
      if (Strike.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Strike);
      }
      if (Right.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Right);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Identifier);
      }
      if (Multiplier != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Multiplier);
      }
      if (Market.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Market);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Currency);
      }
      if (SegType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SegType);
      }
      if (SecType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SecType);
      }
      if (Position != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Position);
      }
      if (PositionScale != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(PositionScale);
      }
      if (AverageCost != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(AverageCost);
      }
      if (LatestPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(LatestPrice);
      }
      if (MarketValue != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(MarketValue);
      }
      if (UnrealizedPnl != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(UnrealizedPnl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Name);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Timestamp);
      }
      if (HasSaleable) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(Saleable);
      }
      if (PositionQty != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(PositionQty);
      }
      if (SalableQty != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(SalableQty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Expiry.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Expiry);
      }
      if (Strike.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Strike);
      }
      if (Right.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Right);
      }
      if (Identifier.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Identifier);
      }
      if (Multiplier != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Multiplier);
      }
      if (Market.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Market);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Currency);
      }
      if (SegType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SegType);
      }
      if (SecType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SecType);
      }
      if (Position != 0L) {
        output.WriteRawTag(96);
        output.WriteSInt64(Position);
      }
      if (PositionScale != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(PositionScale);
      }
      if (AverageCost != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(AverageCost);
      }
      if (LatestPrice != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(LatestPrice);
      }
      if (MarketValue != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(MarketValue);
      }
      if (UnrealizedPnl != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(UnrealizedPnl);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Name);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Timestamp);
      }
      if (HasSaleable) {
        output.WriteRawTag(160, 1);
        output.WriteSInt64(Saleable);
      }
      if (PositionQty != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(PositionQty);
      }
      if (SalableQty != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(SalableQty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Expiry.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expiry);
      }
      if (Strike.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Strike);
      }
      if (Right.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Right);
      }
      if (Identifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Identifier);
      }
      if (Multiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
      }
      if (Market.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Market);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (SegType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SegType);
      }
      if (SecType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecType);
      }
      if (Position != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Position);
      }
      if (PositionScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PositionScale);
      }
      if (AverageCost != 0D) {
        size += 1 + 8;
      }
      if (LatestPrice != 0D) {
        size += 1 + 8;
      }
      if (MarketValue != 0D) {
        size += 2 + 8;
      }
      if (UnrealizedPnl != 0D) {
        size += 2 + 8;
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Timestamp != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (HasSaleable) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Saleable);
      }
      if (PositionQty != 0D) {
        size += 2 + 8;
      }
      if (SalableQty != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PositionData other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Expiry.Length != 0) {
        Expiry = other.Expiry;
      }
      if (other.Strike.Length != 0) {
        Strike = other.Strike;
      }
      if (other.Right.Length != 0) {
        Right = other.Right;
      }
      if (other.Identifier.Length != 0) {
        Identifier = other.Identifier;
      }
      if (other.Multiplier != 0) {
        Multiplier = other.Multiplier;
      }
      if (other.Market.Length != 0) {
        Market = other.Market;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.SegType.Length != 0) {
        SegType = other.SegType;
      }
      if (other.SecType.Length != 0) {
        SecType = other.SecType;
      }
      if (other.Position != 0L) {
        Position = other.Position;
      }
      if (other.PositionScale != 0) {
        PositionScale = other.PositionScale;
      }
      if (other.AverageCost != 0D) {
        AverageCost = other.AverageCost;
      }
      if (other.LatestPrice != 0D) {
        LatestPrice = other.LatestPrice;
      }
      if (other.MarketValue != 0D) {
        MarketValue = other.MarketValue;
      }
      if (other.UnrealizedPnl != 0D) {
        UnrealizedPnl = other.UnrealizedPnl;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.HasSaleable) {
        Saleable = other.Saleable;
      }
      if (other.PositionQty != 0D) {
        PositionQty = other.PositionQty;
      }
      if (other.SalableQty != 0D) {
        SalableQty = other.SalableQty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            Expiry = input.ReadString();
            break;
          }
          case 34: {
            Strike = input.ReadString();
            break;
          }
          case 42: {
            Right = input.ReadString();
            break;
          }
          case 50: {
            Identifier = input.ReadString();
            break;
          }
          case 56: {
            Multiplier = input.ReadUInt32();
            break;
          }
          case 66: {
            Market = input.ReadString();
            break;
          }
          case 74: {
            Currency = input.ReadString();
            break;
          }
          case 82: {
            SegType = input.ReadString();
            break;
          }
          case 90: {
            SecType = input.ReadString();
            break;
          }
          case 96: {
            Position = input.ReadSInt64();
            break;
          }
          case 104: {
            PositionScale = input.ReadSInt32();
            break;
          }
          case 113: {
            AverageCost = input.ReadDouble();
            break;
          }
          case 121: {
            LatestPrice = input.ReadDouble();
            break;
          }
          case 129: {
            MarketValue = input.ReadDouble();
            break;
          }
          case 137: {
            UnrealizedPnl = input.ReadDouble();
            break;
          }
          case 146: {
            Name = input.ReadString();
            break;
          }
          case 152: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 160: {
            Saleable = input.ReadSInt64();
            break;
          }
          case 169: {
            PositionQty = input.ReadDouble();
            break;
          }
          case 177: {
            SalableQty = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            Expiry = input.ReadString();
            break;
          }
          case 34: {
            Strike = input.ReadString();
            break;
          }
          case 42: {
            Right = input.ReadString();
            break;
          }
          case 50: {
            Identifier = input.ReadString();
            break;
          }
          case 56: {
            Multiplier = input.ReadUInt32();
            break;
          }
          case 66: {
            Market = input.ReadString();
            break;
          }
          case 74: {
            Currency = input.ReadString();
            break;
          }
          case 82: {
            SegType = input.ReadString();
            break;
          }
          case 90: {
            SecType = input.ReadString();
            break;
          }
          case 96: {
            Position = input.ReadSInt64();
            break;
          }
          case 104: {
            PositionScale = input.ReadSInt32();
            break;
          }
          case 113: {
            AverageCost = input.ReadDouble();
            break;
          }
          case 121: {
            LatestPrice = input.ReadDouble();
            break;
          }
          case 129: {
            MarketValue = input.ReadDouble();
            break;
          }
          case 137: {
            UnrealizedPnl = input.ReadDouble();
            break;
          }
          case 146: {
            Name = input.ReadString();
            break;
          }
          case 152: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 160: {
            Saleable = input.ReadSInt64();
            break;
          }
          case 169: {
            PositionQty = input.ReadDouble();
            break;
          }
          case 177: {
            SalableQty = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
